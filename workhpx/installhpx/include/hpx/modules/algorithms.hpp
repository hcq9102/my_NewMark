//  Copyright (c) 2019-2022 STE||AR Group
//
//  SPDX-License-Identifier: BSL-1.0
//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// Do not edit this file! It has been generated by the cmake configuration step.

#pragma once

#include <hpx/config.hpp>

#if defined(HPX_HAVE_MODULE_ALGORITHMS)
#include <hpx/algorithms/traits/is_pair.hpp>
#include <hpx/algorithms/traits/is_value_proxy.hpp>
#include <hpx/algorithms/traits/pointer_category.hpp>
#include <hpx/algorithms/traits/projected.hpp>
#include <hpx/algorithms/traits/projected_range.hpp>
#include <hpx/algorithms/traits/segmented_iterator_traits.hpp>
#include <hpx/parallel/algorithm.hpp>
#include <hpx/parallel/algorithms/adjacent_difference.hpp>
#include <hpx/parallel/algorithms/adjacent_find.hpp>
#include <hpx/parallel/algorithms/all_any_none.hpp>
#include <hpx/parallel/algorithms/copy.hpp>
#include <hpx/parallel/algorithms/count.hpp>
#include <hpx/parallel/algorithms/destroy.hpp>
#include <hpx/parallel/algorithms/ends_with.hpp>
#include <hpx/parallel/algorithms/equal.hpp>
#include <hpx/parallel/algorithms/exclusive_scan.hpp>
#include <hpx/parallel/algorithms/fill.hpp>
#include <hpx/parallel/algorithms/find.hpp>
#include <hpx/parallel/algorithms/for_each.hpp>
#include <hpx/parallel/algorithms/for_loop.hpp>
#include <hpx/parallel/algorithms/for_loop_induction.hpp>
#include <hpx/parallel/algorithms/for_loop_reduction.hpp>
#include <hpx/parallel/algorithms/generate.hpp>
#include <hpx/parallel/algorithms/includes.hpp>
#include <hpx/parallel/algorithms/inclusive_scan.hpp>
#include <hpx/parallel/algorithms/is_heap.hpp>
#include <hpx/parallel/algorithms/is_partitioned.hpp>
#include <hpx/parallel/algorithms/is_sorted.hpp>
#include <hpx/parallel/algorithms/lexicographical_compare.hpp>
#include <hpx/parallel/algorithms/make_heap.hpp>
#include <hpx/parallel/algorithms/merge.hpp>
#include <hpx/parallel/algorithms/minmax.hpp>
#include <hpx/parallel/algorithms/mismatch.hpp>
#include <hpx/parallel/algorithms/move.hpp>
#include <hpx/parallel/algorithms/nth_element.hpp>
#include <hpx/parallel/algorithms/partial_sort.hpp>
#include <hpx/parallel/algorithms/partial_sort_copy.hpp>
#include <hpx/parallel/algorithms/partition.hpp>
#include <hpx/parallel/algorithms/reduce_by_key.hpp>
#include <hpx/parallel/algorithms/reduce.hpp>
#include <hpx/parallel/algorithms/remove_copy.hpp>
#include <hpx/parallel/algorithms/remove.hpp>
#include <hpx/parallel/algorithms/replace.hpp>
#include <hpx/parallel/algorithms/reverse.hpp>
#include <hpx/parallel/algorithms/rotate.hpp>
#include <hpx/parallel/algorithms/search.hpp>
#include <hpx/parallel/algorithms/set_difference.hpp>
#include <hpx/parallel/algorithms/set_intersection.hpp>
#include <hpx/parallel/algorithms/set_symmetric_difference.hpp>
#include <hpx/parallel/algorithms/set_union.hpp>
#include <hpx/parallel/algorithms/shift_left.hpp>
#include <hpx/parallel/algorithms/shift_right.hpp>
#include <hpx/parallel/algorithms/stable_sort.hpp>
#include <hpx/parallel/algorithms/starts_with.hpp>
#include <hpx/parallel/algorithms/sort_by_key.hpp>
#include <hpx/parallel/algorithms/sort.hpp>
#include <hpx/parallel/algorithms/swap_ranges.hpp>
#include <hpx/parallel/algorithms/transform_exclusive_scan.hpp>
#include <hpx/parallel/algorithms/transform.hpp>
#include <hpx/parallel/algorithms/transform_inclusive_scan.hpp>
#include <hpx/parallel/algorithms/transform_reduce_binary.hpp>
#include <hpx/parallel/algorithms/transform_reduce.hpp>
#include <hpx/parallel/algorithms/uninitialized_copy.hpp>
#include <hpx/parallel/algorithms/uninitialized_default_construct.hpp>
#include <hpx/parallel/algorithms/uninitialized_fill.hpp>
#include <hpx/parallel/algorithms/uninitialized_move.hpp>
#include <hpx/parallel/algorithms/uninitialized_value_construct.hpp>
#include <hpx/parallel/algorithms/unique.hpp>
#include <hpx/parallel/container_algorithms/adjacent_difference.hpp>
#include <hpx/parallel/container_algorithms/adjacent_find.hpp>
#include <hpx/parallel/container_algorithms/all_any_none.hpp>
#include <hpx/parallel/container_algorithms/copy.hpp>
#include <hpx/parallel/container_algorithms/count.hpp>
#include <hpx/parallel/container_algorithms/destroy.hpp>
#include <hpx/parallel/container_algorithms/ends_with.hpp>
#include <hpx/parallel/container_algorithms/equal.hpp>
#include <hpx/parallel/container_algorithms/exclusive_scan.hpp>
#include <hpx/parallel/container_algorithms/fill.hpp>
#include <hpx/parallel/container_algorithms/find.hpp>
#include <hpx/parallel/container_algorithms/for_each.hpp>
#include <hpx/parallel/container_algorithms/for_loop.hpp>
#include <hpx/parallel/container_algorithms/generate.hpp>
#include <hpx/parallel/container_algorithms.hpp>
#include <hpx/parallel/container_algorithms/includes.hpp>
#include <hpx/parallel/container_algorithms/inclusive_scan.hpp>
#include <hpx/parallel/container_algorithms/is_heap.hpp>
#include <hpx/parallel/container_algorithms/is_partitioned.hpp>
#include <hpx/parallel/container_algorithms/is_sorted.hpp>
#include <hpx/parallel/container_algorithms/lexicographical_compare.hpp>
#include <hpx/parallel/container_algorithms/make_heap.hpp>
#include <hpx/parallel/container_algorithms/merge.hpp>
#include <hpx/parallel/container_algorithms/minmax.hpp>
#include <hpx/parallel/container_algorithms/mismatch.hpp>
#include <hpx/parallel/container_algorithms/move.hpp>
#include <hpx/parallel/container_algorithms/nth_element.hpp>
#include <hpx/parallel/container_algorithms/partial_sort.hpp>
#include <hpx/parallel/container_algorithms/partial_sort_copy.hpp>
#include <hpx/parallel/container_algorithms/partition.hpp>
#include <hpx/parallel/container_algorithms/reduce.hpp>
#include <hpx/parallel/container_algorithms/remove_copy.hpp>
#include <hpx/parallel/container_algorithms/remove.hpp>
#include <hpx/parallel/container_algorithms/replace.hpp>
#include <hpx/parallel/container_algorithms/reverse.hpp>
#include <hpx/parallel/container_algorithms/rotate.hpp>
#include <hpx/parallel/container_algorithms/search.hpp>
#include <hpx/parallel/container_algorithms/set_difference.hpp>
#include <hpx/parallel/container_algorithms/set_intersection.hpp>
#include <hpx/parallel/container_algorithms/set_symmetric_difference.hpp>
#include <hpx/parallel/container_algorithms/set_union.hpp>
#include <hpx/parallel/container_algorithms/shift_left.hpp>
#include <hpx/parallel/container_algorithms/shift_right.hpp>
#include <hpx/parallel/container_algorithms/sort.hpp>
#include <hpx/parallel/container_algorithms/stable_sort.hpp>
#include <hpx/parallel/container_algorithms/starts_with.hpp>
#include <hpx/parallel/container_algorithms/swap_ranges.hpp>
#include <hpx/parallel/container_algorithms/transform.hpp>
#include <hpx/parallel/container_algorithms/transform_exclusive_scan.hpp>
#include <hpx/parallel/container_algorithms/transform_inclusive_scan.hpp>
#include <hpx/parallel/container_algorithms/transform_reduce.hpp>
#include <hpx/parallel/container_algorithms/uninitialized_copy.hpp>
#include <hpx/parallel/container_algorithms/uninitialized_default_construct.hpp>
#include <hpx/parallel/container_algorithms/uninitialized_fill.hpp>
#include <hpx/parallel/container_algorithms/uninitialized_move.hpp>
#include <hpx/parallel/container_algorithms/uninitialized_value_construct.hpp>
#include <hpx/parallel/container_algorithms/unique.hpp>
#include <hpx/parallel/container_memory.hpp>
#include <hpx/parallel/container_numeric.hpp>
#include <hpx/parallel/datapar.hpp>
#include <hpx/parallel/datapar/adjacent_difference.hpp>
#include <hpx/parallel/datapar/adjacent_find.hpp>
#include <hpx/parallel/datapar/equal.hpp>
#include <hpx/parallel/datapar/fill.hpp>
#include <hpx/parallel/datapar/find.hpp>
#include <hpx/parallel/datapar/generate.hpp>
#include <hpx/parallel/datapar/handle_local_exceptions.hpp>
#include <hpx/parallel/datapar/iterator_helpers.hpp>
#include <hpx/parallel/datapar/loop.hpp>
#include <hpx/parallel/datapar/mismatch.hpp>
#include <hpx/parallel/datapar/reduce.hpp>
#include <hpx/parallel/datapar/replace.hpp>
#include <hpx/parallel/datapar/transfer.hpp>
#include <hpx/parallel/datapar/transform_loop.hpp>
#include <hpx/parallel/datapar/zip_iterator.hpp>
#include <hpx/parallel/memory.hpp>
#include <hpx/parallel/numeric.hpp>
#include <hpx/parallel/spmd_block.hpp>
#include <hpx/parallel/task_block.hpp>
#include <hpx/parallel/task_group.hpp>
#include <hpx/parallel/unseq.hpp>
#include <hpx/parallel/unseq/loop.hpp>
#include <hpx/parallel/unseq/reduce.hpp>
#include <hpx/parallel/unseq/reduce_helpers.hpp>
#include <hpx/parallel/unseq/transform_loop.hpp>
#include <hpx/parallel/util/adapt_placement_mode.hpp>
#include <hpx/parallel/util/adapt_sharing_mode.hpp>
#include <hpx/parallel/util/adapt_thread_priority.hpp>
#include <hpx/parallel/util/cancellation_token.hpp>
#include <hpx/parallel/util/compare_projected.hpp>
#include <hpx/parallel/util/foreach_partitioner.hpp>
#include <hpx/parallel/util/invoke_projected.hpp>
#include <hpx/parallel/util/loop.hpp>
#include <hpx/parallel/util/low_level.hpp>
#include <hpx/parallel/util/merge_four.hpp>
#include <hpx/parallel/util/merge_vector.hpp>
#include <hpx/parallel/util/nbits.hpp>
#include <hpx/parallel/util/partitioner.hpp>
#include <hpx/parallel/util/partitioner_with_cleanup.hpp>
#include <hpx/parallel/util/prefetching.hpp>
#include <hpx/parallel/util/projection_identity.hpp>
#include <hpx/parallel/util/range.hpp>
#include <hpx/parallel/util/ranges_facilities.hpp>
#include <hpx/parallel/util/result_types.hpp>
#include <hpx/parallel/util/scan_partitioner.hpp>
#include <hpx/parallel/util/transfer.hpp>
#include <hpx/parallel/util/transform_loop.hpp>
#include <hpx/parallel/util/zip_iterator.hpp>
#endif

